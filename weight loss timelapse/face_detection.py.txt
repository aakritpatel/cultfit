import cv2
from PIL import Image
import os

# Paths
input_folder = r"C:\python_stuff\downloaded_images"
output_folder = r"C:\python_stuff\timelapse"
os.makedirs(output_folder, exist_ok=True)

# Target dimensions (e.g., 1080x1080 frame with the face taking 40% of the height)
target_size = (1080, 1080)
face_height_ratio = 0.4  # Adjust as needed

# Load pre-trained face detection model
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

for filename in os.listdir(input_folder):
    if filename.endswith((".png", ".jpg", ".jpeg")):
        img_path = os.path.join(input_folder, filename)
        img = cv2.imread(img_path)
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        # Detect face(s)
        faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

        if len(faces) > 0:
            # Assume the largest detected face is the main subject
            x, y, w, h = max(faces, key=lambda box: box[2] * box[3])

            # Crop to face with some padding
            padding = int(0.5 * h)  # Adjust padding as needed
            x1 = max(x - padding, 0)
            y1 = max(y - padding, 0)
            x2 = min(x + w + padding, img.shape[1])
            y2 = min(y + h + padding, img.shape[0])
            cropped_img = img[y1:y2, x1:x2]

            # Resize to target size
            face_target_height = int(target_size[1] * face_height_ratio)
            scale = face_target_height / h
            new_width = int(img.shape[1] * scale)
            new_height = int(img.shape[0] * scale)
            resized_img = cv2.resize(cropped_img, (new_width, new_height))

            # Center the resized face in the frame
            centered_img = Image.new("RGB", target_size, (255, 255, 255))
            centered_img.paste(
                Image.fromarray(resized_img),
                ((target_size[0] - new_width) // 2, (target_size[1] - new_height) // 2)
            )

            # Save the centered image
            centered_img.save(os.path.join(output_folder, filename))
        else:
            print(f"No face detected in {filename}, skipping...")
print("Processing complete!")
